#include<stdio.h>
#include<stdlib.h>
struct node{
    int key;
    struct node *left;
    struct node *right;
}*root=NULL;

struct node* insert(struct node* root,int e)
{
    if(root==NULL)
    {
        root=(struct node*)malloc(sizeof(struct node));
        root->key=e;
        root->left=root->right=NULL;
        return root;
  }
    else if(root->key>e)
    {
        root->left=insert(root->left,e);
    }
    else if(root->key<e)
    {
        root->right=insert(root->right,e);
    }
    return root;
}

int minimum(struct node* root)
{
    if(root->left==NULL)
    {
        return root->key;
    }
    else
    {
        return minimum(root->left);
    }
    
}

struct node* delete(struct node* root,int e)
{
    if(root==NULL)
    {
        return root;
    }
    else if(root->key>e)
    {
        root->left=delete(root->left,e);
        
    }
    else if(root->key<e)
    {
        root->right=delete(root->right,e);
        
    }
    else
    {
        if(root->left==NULL && root->right==NULL)
        {
        remove; 
        root;
        return NULL;
        }
        else if(root->left==NULL)
        {
            root=root->right;
        }
        else if(root->right==NULL)
        {
            root=root->left;
            
        }
        else
        {
            int data=minimum(root->right);
            root->key=data;
            root->right=delete(root->right,data);
        }
        
    }
    return root;
    }


void inorder(struct node *root)
{
    if(root==NULL)
    {
        return;
            
    }
    inorder(root->left);
    printf("%d",root->key);
    inorder(root->right);
}

int main()
{
    int n,i,e;
    printf("Enter the number of elements:");
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        printf("Enter the element:");
        scanf("%d",&e);
        root=insert(root,e);
            
    }
    inorder(root);
    printf("\n");
    printf("Enter the element that has to remove:");
    scanf("%d",&e);
    root=delete(root,e);
    inorder(root);
    }
